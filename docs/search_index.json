[
["index.html", "Dealing With Big Data in R: Case Studies Preface", " Dealing With Big Data in R: Case Studies Lingyun Zhang 2020-04-27 Preface "],
["some-ideas.html", "1 some ideas", " 1 some ideas Database approach, see Peter Ellis’ blog article special packages, such as sparkly, H2O parallel computing take a sample References: Chris’ talk; Garrett Grolemund’s talk "],
["case-study-1.html", "Case Study 1", " Case Study 1 Problem statement: We have two dataframes, df1 and df2. df1 has two columns/variables, id and x; and it has 1 million rows. df2 has 1,001 columns—id and i1 up to i1000; and it has 100,000 rows. We want to do full join of df1 and df2 and then find y1 = x + i1, y2 = x + i2, …, y1000 = x + i1000 and finally find mean of these y for each row. A solution: library(data.table) library(tidyverse) # helper function --------------------------------------------------------- my_op_func &lt;- function(vec_0, a_vec) {long_vec &lt;- rep(0, L) long_vec[df2_index[, the_index]] &lt;- a_vec total_vec &lt;- vec_0 + long_vec return(total_vec) } # create fake data -------------------------------------------------------- df1 &lt;- data.table(id = 1L:1000000L, x = sample(1:5, 1000000, replace = TRUE)) df1 &lt;- df1[order(id)] df2 &lt;- data.table(id = sample(1001L:1001000L, 100000, replace = FALSE)) temp_data &lt;- map(1:1000, function(x) sample(1:3, 100000, replace = TRUE)) df2 &lt;- df2[, c(paste0(&quot;i&quot;, 1:1000)) := temp_data] df2 &lt;- df2[order(id)] # all ids ----------------------------------------------------------------- df1_ids &lt;- df1[, .(id)] df2_ids &lt;- df2[, .(id)] all_ids &lt;- full_join(df1_ids, df2_ids) %&gt;% setDT() all_ids &lt;- all_ids[order(id)] # do the operations ------------------------------------------------------- L &lt;- dim(all_ids)[1] all_ids &lt;- all_ids[, `:=`(the_index = 1:L)] df1_index &lt;- df1_ids %&gt;% left_join(all_ids) %&gt;% select(the_index) %&gt;% setDT() df1_index &lt;- df1_index[order(the_index)] df2_index &lt;- df2_ids %&gt;% left_join(all_ids) %&gt;% select(the_index) %&gt;% setDT() df2_index &lt;- df2_index[order(the_index)] vec0 &lt;- rep(0, L) vec0[df1_index[, the_index]] &lt;- df1[, x] system.time({ for(i in 1:1000) {the_total &lt;- my_op_func(vec_0 = vec0, a_vec = df2[[paste0(&quot;i&quot;, i)]]) vec0 &lt;- the_total } the_mean &lt;- the_total /1000 }) "]
]
